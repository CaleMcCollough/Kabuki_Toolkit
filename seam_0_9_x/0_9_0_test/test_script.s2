/* Script uses C++ comments and Doxygen notation.
   Script is designed for natural language processing so delimiters are the 
   non-alpha-numeric ASCII chars and any symbol key may be user-defined as
   either a Operation (function call), Operand (push object onto stack), 
   Operation Push (function call with corresponding stack push), or an 
   Escape Sequence Macro.

   There are three functions in this example: Foo, Bar, an FooBar. They take 
   the respective input and output parameters:
        +--------------- 4 input parameters
        |   +----------- A string of max length 31.
        |   |       +--- A signed integer with 1-byte (8-bit) width.
        |   |       |
        |   |       |               +-- There are 0 return parameters.
        |   |       |               |
        v   v       v               v
   Foo <4, STR:32, SI1, SI2, SI4>:<NIL>
   Bar <1, STR:32>:<3, SI1, SI2, SI4>
   FooBar <DIC2, UI1>:<NIL>
            ^     ^
            |     |
            |     +----- An 8-bit unsigned integer.
            +----------- A 16-bit dictionary.
*/

Parent.Child1.Foo ("Hello world!", 1, 2, 3);
Parent Child1 Foo "Hello world!", 1, 2, 3;//< () and ',' are optional
Parent Child1 Foo "Hello world!" 1 2 3    //< There is no pop instruction here
              Foo "Hello "                //< so this is a string of Operations.
                  "world!" 1 2
                  3;                      //< The Last 2 Foo calls execute when  
                                          //< the ";" operation is read.

Parent {
    Child1 {
        Foo ("Hello world!", 1, 2, 3)
        Foo ("Hello world!", 1, 2, 3)    //< String operations together!
        Bar ("Lets go!")
    }
    Child2 {
        Foo ("Hello world!" 1, 2, 3)
    }
} //< Code won't execute until you close the curly brackets or type ';'
Parent1 {
    Child1 {
        Foo ("Hello world!", 1, 2, 3)
/* Below is an example if an Escape Sequence Macro that may be used in function 
   to pass parameters and chain Operations. Script's multiple return parameters 
   allows b-sequences to be used to pass some but not all of the parameters 
   into another Operation. */
Foo ("Bar goes the programmer." .Parent1.Child1.Bar ("Lets go!"))

/*                 +-------------------- Operation "." pushes the root Operand 
                   |                     on stack. This helps speed up key 
                   |                     resolution but is not required because 
                   |                     any key not in the current scope will 
                   |                     get checked for in the root scope if 
                   v                     it's not in the current scope. */
let esc_sequence = .Parent.Child1.Bar ("This is an Escape sequence!");
.Parent1.Child1.Foo ("This is an Escape Sequence", esc_sequence);

/* Dictionary Example.
   Dictionaries are created and edited using Escape Sequences.

 +-------------------------------------- Operation with key "let" that takes a
 |                                       Token (TKN), which is UTF-8 string 
 |                                       without any whitespace or symbols.
 |                                       Operation basically creates a 
 |                                       Expression that we then start writing 
 |                                       to.
 |                 +-------------------- Operation Push "=DIC_4" is a special 
 |                 |                     function that creates a dictionary that is size 1024 
 |                 |                     bytes with a maximum of 3 entries and 
 |                 |                     pushes it onto the stack. This Operation Push
 |                 |                     gets written to the new Expression.
 |                 |    
 v                 V               */
let root :=DIC_4 (2048, 3) {
/*< 
    +----------------------------------- Operation with key "+DIC_4" identical 
    |                                    to "$DIC_4" except it will be evaluated 
    |                                    each time it gets called, which is 
    |                                    once in this context.
    |
    |          +------------------------ Same "DIC2_4" Operand as above.
    |          |       +---------------- This reserves 3 dictionary members.
    |          |       |
    v          v       v              */
    +=DIC_4 (nested, 1024, 3) {       /* This is a nested dictionary.
         +------------------------------ This is a operation with key "STR"
         |      +----------------------- Dictionary key.
         |      |    +------------------ Max length 12.
         |      |    |   +-------------- STR value.
         |      |    |   |
         v      v    v   v         */
        +=STR (item1 12 "ABC")
        -=Key item1               /*      Operation "-Key" removes "item1".
          
          +----------------------------- This is a function with key "UI2".
          |       +--------------------- henThis is a 16-bit unsigned int.
          |       |
          v       v */
        +=SI1 item1 1
        +=SI2 (item2, 2)
        +=SI4 item3 1
        -=Index 2                    //< Removes index 2:"item3".
        +=SI2 item3 -1
        +=UI2 item4 1
        /*< We can't add item4 because we set the max elements to 3.
            This won't generate an error but may generate an error 
            message. */
        -=All                        //< Removes everything we just added.
        Shrink
    }
}

/** Return Address (ADR) Example.

    @fn =
	@param <NIL>:<BSQ>
*/

let abc123 := { 1 2 3 } /*< Operand "=$" default takes a Unicode char.
                           and returns a BSQ token 123.
				   +------ Then we pass the return address as a input parameter
				   |       using the $ operator which is similar to static const.
				   |       Had $ not been here we would evaluate evaluate 
				   |       { 1, 2, 3} again.
                   v */
Parant.Child1.Foo ($abc123 "Number conversion Example" root.nested.item1,
                   root nested item2 root nested item3)

FooBar (stuff, 1);

/** Inter-process LISP Example.
    Functions 
    
*/

let xyz =UI2(+ UI2(* 2 3) 3 4)

FooWeNeedNewNames (return_address $xyz);
